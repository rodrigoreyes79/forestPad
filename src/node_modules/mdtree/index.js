var fs = require('fs');
var utf8 = require('utf8');
var mkdirp = require('mkdirp');
var $ = require('jquery');
var glob = require('glob');
var moment = require('moment');

// ------------------
// Data Access Layers
// ------------------

var FileSystemDAL = function(uri){
	var self = this;
	self.uri = uri;
	
	var mainIndex = uri + '/main.json';
	
	self.init = function(){
		var d = $.Deferred();
		mkdirp(uri, function(){
			var mainIndexExists = !isEmpty(mainIndex);
			console.log('mainIndexExists: ' + mainIndexExists);
			if(!mainIndexExists){
				initFs();
				setTimeout(d.resolve, 1000*2);
			} else {
				d.resolve();
			}
		});
		return d.promise();
	}
	
	var searchFiles = function(exp){
		var d = $.Deferred();
		glob(exp, {cwd: uri}, function (er, files) {
			d.resolve(files);
		})
		
		return d.promise();
	}
	
	var isEmpty = function(path){
		var empty = fs.existsSync(path);
		console.log(path + '?' + empty);
		return !empty;
	}
	
	var initFs = function(){
		var now = moment().format('YYYYMMDDHHmmss');
		fs.writeFileSync(mainIndex, '[{"id": "' + now + '", "name": "Home", "closed": false, "selected": true, "children":[]}]');
		var mainIndexExists = isEmpty(mainIndex);
		console.log('mainIndexExists: ' + mainIndexExists);
		fs.writeFileSync(uri + "/" + now + '.Home.md', "Welcome :)");
	}
	
	self.getPages = function(){
		return searchFiles("*.md");
	}
	
	self.getTrees = function(){
		return searchFiles("*.json");
	}
	
	self.getTree = function(file){
		return require(uri + '/' + file);
	}
	
	self.getMd = function(node){
		var d = $.Deferred();
		var file = nodeFile(node);
		console.log('Trying to retrieve ' + file);
		if(isEmpty(file)){
			d.resolve('');
		} else {
			fs.readFile(file, 'utf8', function(err, data) {
				if (err) throw err;
				d.resolve(data);
			});
		}
		return d.promise();
	}
	
	self.updateMd = function(node, md){
		var filename = nodeFile(node);
		if(md.length < 1){
			if(!isEmpty(filename)) fs.unlink(filename);
		} else {
			var data = utf8.encode(md);
			fs.writeFile(nodeFile(node), data, {});
		}
	}
	
	self.updateTree = function(file, data){
		var data = utf8.encode(data);
		fs.writeFile(uri + '/' + file, data, {});
	}
	
	var nodeFile = function(node){
		return uri + '/' + node.id() + '.' + node.name() + '.md';
	}
}

module.exports = {
	FileSystemDAL: FileSystemDAL
}